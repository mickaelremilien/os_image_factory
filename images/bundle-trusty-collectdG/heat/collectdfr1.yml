heat_template_version: 2013-05-23

description: >
  HOT template to deploy one instance into the existing VPN Server Lan

parameters:

  key_name:
    description: Keypair to inject in instance
    label: SSH Keypair
    type: string
    default: mickael

  image:
    type: string
    description: Glance Image
    default: "Ubuntu 14.04"

  flavor:
    default: n2.cw.standard-2
    description: Flavor to use for the deployed instance
    type: string
    label: Instance Type (Flavor)
    constraints:
      - allowed_values:
        - t1.cw.tiny
        - s1.cw.small-1
        - n2.cw.standard-1
        - n2.cw.standard-2
        - n2.cw.standard-4
        - n2.cw.standard-8
        - n2.cw.standard-12
        - n2.cw.standard-16
        - n2.cw.highmem-2
        - n2.cw.highmem-4
        - n2.cw.highmem-8
        - n2.cw.highmem-12

resources:

  network:
    type: OS::Neutron::Net


  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: 6ea98324-0f14-49f6-97c0-885d1b8dc517
      port_id: { get_resource: server_port }

  floating_ip_link:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: floating_ip }
      server_id: { get_resource: server }

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - { direction: ingress, protocol: TCP, port_range_min: 22, port_range_max: 22 }
        - { direction: ingress, protocol: TCP, port_range_min: 80, port_range_max: 80 }
        - { direction: ingress, protocol: TCP, port_range_min: 443, port_range_max: 443 }
        - { direction: ingress, protocol: UDP, port_range_min: 3306, port_range_max: 3306 }
        - { direction: egress, protocol: UDP, port_range_min: 3306, port_range_max: 3306 }
        - { direction: ingress, protocol: UDP, port_range_min: 3000, port_range_max: 3000 }
        - { direction: egress, protocol: UDP, port_range_min: 3000, port_range_max: 3000 }
        - { direction: ingress, protocol: TCP, port_range_min: 3000, port_range_max: 3000 }
        - { direction: egress, protocol: TCP, port_range_min: 3000, port_range_max: 3000 }
        - { direction: egress, protocol: TCP, port_range_min: 2003, port_range_max: 2003 }
        - { direction: ingress, protocol: TCP, port_range_min: 2003, port_range_max: 2003 }
        - { direction: egress, protocol: TCP, port_range_min: 8080, port_range_max: 8080 }
        - { direction: ingress, protocol: TCP, port_range_min: 8080, port_range_max: 8080 }
        - { direction: egress, protocol: UDP, port_range_min: 25826, port_range_max: 25826 }
        - { direction: ingress, protocol: UDP, port_range_min: 25826, port_range_max: 25826 }
        - { direction: egress, protocol: TCP, port_range_min: 25826, port_range_max: 25826 }
        - { direction: ingress, protocol: TCP, port_range_min: 25826, port_range_max: 25826 }
        - { direction: ingress, protocol: ICMP }
        - { direction: egress, protocol: ICMP }
        - { direction: egress, protocol: TCP }
        - { direction: egress, protocol: UDP }

  server_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: network }
      fixed_ips:
        - subnet_id: { get_resource: subnet }
      security_groups: [{ get_resource: security_group }]

  # security_group:
  #   type: OS::Neutron::SecurityGroup
  #   properties:
  #     rules:
  #       # - { direction: ingress, protocol: TCP, port_range_min: 22, port_range_max: 22 }
  #       # - { direction: ingress, protocol: TCP, port_range_min: 80, port_range_max: 80 }
  #       # - { direction: ingress, protocol: TCP, port_range_min: 443, port_range_max: 443 }
  #       # - { direction: ingress, protocol: ICMP }
  #       # - { direction: egress, protocol: TCP, port_range_min: 80, port_range_max: 80 }
  #       - { direction: ingress, protocol: TCP, port_range_min: 0, port_range_max: 65535 }
  #       - { direction: ingress, protocol: UDP, port_range_min: 0, port_range_max: 65535 }
  #       - { direction: egress, protocol: ICMP }
  #       - { direction: egress, protocol: TCP }
  #       - { direction: egress, protocol: UDP }

  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: network }
      ip_version: 4
      cidr: 10.0.1.0/24
      allocation_pools:
        - { start: 10.0.1.10, end: 10.0.1.199 }

  server:
    type: OS::Nova::Server
    properties:
      name: MonServ
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server_port }
      user_data_format: RAW
      user_data: |
        #!/usr/bin/env bash
        export DEBIAN_FRONTEND=noninteractive
        apt-get update 2>&1 >> /var/log/col_srv.log
        echo "$(date) - update done" >> /var/log/col_srv.log
        apt-get -o Dpkg::Options::="--force-confold" upgrade -y 2>&1 >> /var/log/col_srv.log
        echo "$(date) - upgrade done" >> /var/log/col_srv.log
        mkdir /etc/ansible
        echo "[local]" >> /etc/ansible/hosts
        echo "127.0.0.1 ansible_connection=local" >> /etc/ansible/hosts
        cd /home/cloud
        git clone https://github.com/mickaelremilien/os_image_factory.git
        sudo ansible-playbook os_image_factory/images/bundle-trusty-collectdG/ansible/boot2strapcollectdG.yml -vvvv

outputs:

  floating_ip_server:
    description: IP address of the deployed compute server
    value: { get_attr: [floating_ip, floating_ip_address] }

  server_private_ip:
    description: IP address of client in private network
    value: { get_attr: [ server, first_address ] }

  floating_ip_url:
    description: grafana URL
    value:
      str_replace:
        template: http://$floating_ip$:3000
        params:
          $floating_ip$: { get_attr: [floating_ip, floating_ip_address] }
