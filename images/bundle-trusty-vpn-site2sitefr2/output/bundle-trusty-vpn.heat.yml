heat_template_version: 2013-05-23


description: Virtual Private Network Stack Site to Site


parameters:

  client_cidr:
    description: /24 cidr of target subnet (other end of the tunnel)
    type: string

  server_cidr:
    description: /24 cidr of local subnet
    type: string

  ip_server_adress:
    description: ip server floating ip
    type: string

  keypair_name:
    description: Keypair to inject in instance
    label: SSH Keypair
    type: string

  serv_public_key:
    description: public KEY server openvpn
    type: string

  imageclient:
    type: string
    description: Glance Image
    default:  d085337b-d992-4802-a9fb-48536c2723f7

  flavor_name:
    default: n2.cw.standard-2
    description: Flavor to use for the deployed instance
    type: string
    label: Instance Type (Flavor)
    constraints:
      - allowed_values:
        - n2.cw.standard-1
        - n2.cw.standard-2
        - n2.cw.standard-4

resources:

  network2:
    type: OS::Neutron::Net

  subnet2:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: network2 }
      ip_version: 4
      cidr:  { get_param: client_cidr }
      host_routes:
        - destination: 0.0.0.0/0
          nexthop: { "Fn::Replace": [ {'.0/24': '.1'}, {get_param: client_cidr} ] }
        - destination: { get_param: server_cidr }
          nexthop: { "Fn::Replace": [ {'.0/24': '.100'}, {get_param: client_cidr} ] }

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - { direction: ingress, protocol: TCP, port_range_min: 22, port_range_max: 22 }
        - { direction: ingress, protocol: TCP, port_range_min: 80, port_range_max: 80 }
        - { direction: ingress, protocol: TCP, port_range_min: 443, port_range_max: 443 }
        - { direction: ingress, protocol: UDP, port_range_min: 1194, port_range_max: 1194 }
        - { direction: ingress, protocol: ICMP }
        - { direction: egress, protocol: ICMP }
        - { direction: egress, protocol: TCP }
        - { direction: egress, protocol: UDP }
        - { direction: egress, protocol: UDP, port_range_min: 1194, port_range_max: 1194 }

  floating_ip2:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: b5dd7532-1533-4b9c-8bf9-e66631a9be1d
      port_id: { get_resource: client_port }

  floating_ip_link2:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: floating_ip2 }
      server_id: { get_resource: client }

  client_port:
    type: OS::Neutron::Port
    properties:
      security_groups:
        - { get_resource: security_group }
      network_id: { get_resource: network2 }
      fixed_ips:
        - ip_address: { "Fn::Replace": [ {'.0/24': '.100'}, {get_param: client_cidr} ] }

  client:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: keypair_name }
      image:  { get_param: imageclient }
      flavor: { get_param: flavor_name }
      networks:
      - port: { get_resource: client_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/usr/bin/env bash
            sudo mkdir /home/cloud/config
            echo -n "$autkey$" >> /home/cloud/.ssh/authorized_keys
            sudo chown -R cloud:cloud /home/cloud/config
            echo -n "$ip_server$" >> /home/cloud/config/ip_server
            echo -n "$server_cidr$" >> /home/cloud/config/server_cidr
            echo -n "$client_cidr$" >> /home/cloud/config/client_cidr
            sed 's/\(.*\)\/.*/\1/' < /home/cloud/config/server_cidr > /home/cloud/config/server_cidr.tmp
            sed 's/\(.*\)\/.*/\1/' < /home/cloud/config/client_cidr > /home/cloud/config/client_cidr.tmp
            cp /home/cloud/config/client_cidr /home/cloud/config/client_cidr_gw.tmp
            cp /home/cloud/config/client_cidr /home/cloud/config/client_cidr_gw_df.tmp
            cp /home/cloud/config/server_cidr /home/cloud/config/server_cidr_gw.tmp
            cp /home/cloud/config/server_cidr /home/cloud/config/server_cidr_gw_df.tmp
            sed -i -e "s/\//:/g"  /home/cloud/config/server_cidr_gw.tmp
            sed -i -e "s/\//:/g"  /home/cloud/config/server_cidr_gw_df.tmp
            sed -i -e "s/0:24/100/g" /home/cloud/config/server_cidr_gw.tmp
            sed -i -e "s/0:24/1/g"  /home/cloud/config/server_cidr_gw_df.tmp
            sed -i -e "s/\//:/g"  /home/cloud/config/client_cidr_gw.tmp
            sed -i -e "s/\//:/g"  /home/cloud/config/client_cidr_gw_df.tmp
            sed -i -e "s/0:24/100/g" /home/cloud/config/client_cidr_gw.tmp
            sed -i -e "s/0:24/1/g"  /home/cloud/config/client_cidr_gw_df.tmp
            echo "$(date) - START" >> /var/log/vpn_srv.log
            export DEBIAN_FRONTEND=noninteractive
            apt-get update 2>&1 >> /var/log/vpn_client.log
            echo "$(date) - update done" >> /var/log/vpn_client.log
            apt-get -o Dpkg::Options::="--force-confold" upgrade -y 2>&1 >> /var/log/vpn_client.log
            echo "$(date) - upgrade done" >> /var/log/vpn_client.log
            apt-get -o Dpkg::Options::="--force-confold" install openvpn -y 2>&1 >> /var/log/vpn_client.log
            echo "$(date) - openvpn done" >> /var/log/vpn_client.log
            mkdir /etc/ansible
            echo "[local]" >> /etc/ansible/hosts
            echo "127.0.0.1 ansible_connection=local" >> /etc/ansible/hosts
            ssh-keygen -t rsa
            cd /home/cloud/
            sudo ansible-playbook /home/cloud/ansibleClient/bootstrap.yml
            sudo rm -r ansibleServer ansibleClient config 
          params:
            $ip_server$: { get_param: ip_server_adress }
            $server_cidr$: {get_param: server_cidr}
            $client_cidr$: {get_param: client_cidr}
            $autkey$: {get_param: serv_public_key}

outputs:

  client_private_ip:
    description: IP address of server on private network
    value: { get_attr: [ client, first_address ] }


  floating_ip_client:
    description: IP address of the deployed compute client
    value: { get_attr: [floating_ip2, floating_ip_address] }
