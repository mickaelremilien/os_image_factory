heat_template_version: 2013-05-23


description: Virtual Private Network Stack Site to Site


parameters:

  mykey_name:
    description: Keypair to inject in instance
    label: SSH Keypair
    type: string

  server_cidr:
    description: /24 cidr of local subnet
    type: string
    default: 10.10.10.0/24

  client_cidr:
    description: /24 cidr of target subnet (other end of the tunnel)
    type: string
    default: 20.20.20.0/24

  COUNTRY:
    description: COUNTRY for the VPN certificate
    label: certificate VPN COUNTRY
    type: string
    hidden: true
    constraints:
      - length: { min: 1, max: 2 }
        description: COUNTRY must be between 1 and 2 characters
    default: FR

  PROVINCE:
    description: PROVINCE for the VPN certificate
    label: certificate VPN PROVINCE
    type: string
    hidden: true
    constraints:
      - length: { min: 1, max: 40 }
        description: PROVINCE must be between 1 and 40 characters
    default: IDF

  CITY:
    description: CITY for the VPN certificate
    label: certificate VPN CITY
    type: string
    hidden: true
    constraints:
      - length: { min: 1, max: 40 }
        description: CITY must be between 1 and 40 characters
    default: Paris

  ORGANISATION:
    description: ORGANISATION for the VPN certificate
    label: certificate VPN ORGANISATION
    type: string
    hidden: true
    constraints:
      - length: { min: 1, max: 40 }
        description: ORGANISATION must be between 1 and 40 characters
    default: CLOUDWATT

  EMAIL:
    description: EMAIL for the VPN certificate
    label: certificate VPN EMAIL
    type: string
    hidden: true
    constraints:
      - length: { min: 1, max: 40 }
        description:  EMAIL must be between 1 and 40 characters
    default: contact@Cloudwatt.com

  keypair_name:
    description: Keypair to inject in instance
    label: SSH Keypair
    type: string
    default: mickael

  imageserver:
    type: string
    description: Glance Image
    default:  d37c7996-2fd1-469a-ade1-6b1f543733f0

  flavor_name:
    description: Flavor to use for the deployed instance
    type: string
    label: Instance Type (Flavor)
    constraints:
      - allowed_values:
        - n1.cw.standard-1
        - n1.cw.standard-2
        - n1.cw.standard-4
    default:  n1.cw.standard-1

resources:

  my_key:
    type: OS::Nova::KeyPair
    properties:
      save_private_key: true
      name: { get_param: mykey_name }

  network:
    type: OS::Neutron::Net

  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: network }
      ip_version: 4
      cidr: { get_param: server_cidr }
      host_routes:
        - destination: 0.0.0.0/0
          nexthop: { "Fn::Replace": [ {'.0/24': '.1'}, {get_param: server_cidr} ] }
        - destination: { get_param: client_cidr }
          nexthop: { "Fn::Replace": [ {'.0/24': '.100'}, {get_param: server_cidr} ] }

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - { direction: ingress, protocol: TCP, port_range_min: 22, port_range_max: 22 }
        - { direction: ingress, protocol: TCP, port_range_min: 80, port_range_max: 80 }
        - { direction: ingress, protocol: TCP, port_range_min: 443, port_range_max: 443 }
        - { direction: ingress, protocol: UDP, port_range_min: 1194, port_range_max: 1194 }
        - { direction: ingress, protocol: ICMP }
        - { direction: egress, protocol: ICMP }
        - { direction: egress, protocol: TCP }
        - { direction: egress, protocol: UDP }
        - { direction: egress, protocol: UDP, port_range_min: 1194, port_range_max: 1194 }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: 6ea98324-0f14-49f6-97c0-885d1b8dc517
      port_id: { get_resource: server_port }

  floating_ip_link:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: floating_ip }
      server_id: { get_resource: server }

  server_port:
    type: OS::Neutron::Port
    properties:
      security_groups:
        - { get_resource: security_group }
      network_id: { get_resource: network }
      fixed_ips:
        - ip_address: { "Fn::Replace": [ {'.0/24': '.100'}, {get_param: server_cidr} ] }

  server:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: keypair_name }
      image:  { get_param: imageserver }
      flavor: { get_param: flavor_name }
      networks:
      - port: { get_resource: server_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/usr/bin/env bash
            sudo mkdir /etc/vpnconf/
            sudo mkdir /home/cloud/config
            sudo chown -R cloud:cloud /home/cloud/config
            echo -n "$mykey_namepriv$" >> /home/cloud/.ssh/"$mykey_name$".pem
            echo -n "$mykey_name$" >> home/cloud/config/mykey_name
            echo -n "$mykey_namepub$" >> /home/cloud/.ssh/authorized_keys
            echo -n "$server_cidr$" >> /home/cloud/config/server_cidr
            echo -n "$client_cidr$" >> /home/cloud/config/client_cidr
            sed 's/\(.*\)\/.*/\1/' < /home/cloud/config/server_cidr > /home/cloud/config/server_cidr.tmp
            sed 's/\(.*\)\/.*/\1/' < /home/cloud/config/client_cidr > /home/cloud/config/client_cidr.tmp
            cp /home/cloud/config/server_cidr /home/cloud/config/server_cidr_gw.tmp
            cp /home/cloud/config/server_cidr /home/cloud/config/server_cidr_gw_df.tmp
            cp /home/cloud/config/client_cidr /home/cloud/config/client_cidr_gw.tmp
            cp /home/cloud/config/client_cidr /home/cloud/config/client_cidr_gw_df.tmp
            sed -i -e "s/\//:/g"  /home/cloud/config/server_cidr_gw.tmp
            sed -i -e "s/\//:/g"  /home/cloud/config/server_cidr_gw_df.tmp
            sed -i -e "s/0:24/100/g" /home/cloud/config/server_cidr_gw.tmp
            sed -i -e "s/0:24/1/g"  /home/cloud/config/server_cidr_gw_df.tmp
            sed -i -e "s/\//:/g"  /home/cloud/config/client_cidr_gw.tmp
            sed -i -e "s/\//:/g"  /home/cloud/config/client_cidr_gw_df.tmp
            sed -i -e "s/0:24/100/g" /home/cloud/config/client_cidr_gw.tmp
            sed -i -e "s/0:24/1/g"  /home/cloud/config/client_cidr_gw_df.tmp
            echo -n "$ip_client$" >> /home/cloud/config/ip_client
            echo -n "$COUNTRY$" >> /etc/vpnconf/COUNTRY
            echo -n "$PROVINCE$" >> /etc/vpnconf/PROVINCE
            echo -n "$CITY$" >> /etc/vpnconf/CITY
            echo -n "$ORGANISATION$" >> /etc/vpnconf/ORGANISATION
            echo -n "$EMAIL$" >> /etc/vpnconf/EMAIL
            echo "$(date) - START" >> /var/log/vpn_srv.log
            export DEBIAN_FRONTEND=noninteractive
            apt-get update 2>&1 >> /var/log/vpn_srv.log
            echo "$(date) - update done" >> /var/log/vpn_srv.log
            apt-get -o Dpkg::Options::="--force-confold" upgrade -y 2>&1 >> /var/log/vpn_srv.log
            echo "$(date) - upgrade done" >> /var/log/vpn_srv.log
            apt-get -o Dpkg::Options::="--force-confold" install openvpn -y 2>&1 >> /var/log/vpn_srv.log
            echo "$(date) - openvpn done" >> /var/log/vpn_srv.log
            mkdir /etc/ansible
            echo "[local]" >> /etc/ansible/hosts
            echo "127.0.0.1 ansible_connection=local" >> /etc/ansible/hosts
            ssh-keygen -t rsa
            cd /home/cloud/
            sudo ansible-playbook /home/cloud/ansibleServer/bootstrap.yml
          params:
            $COUNTRY$: { get_param: COUNTRY }
            $PROVINCE$: { get_param: PROVINCE }
            $CITY$: { get_param: CITY }
            $ORGANISATION$: { get_param: ORGANISATION }
            $EMAIL$:  { get_param: EMAIL }
            $mykey_name$: {get_param: mykey_name }
            $mykey_namepriv$: { get_attr: [ my_key, private_key ] }
            $mykey_namepub$: {  get_attr: [ my_key, public_key ] }
            $client_cidr$: {get_param: client_cidr}
            $server_cidr$: {get_param: server_cidr}

outputs:

  public_key:
      description: Public key
      value: { get_attr: [ my_key, public_key ] }

  server_private_ip:
    description: IP address of server on private network
    value: { get_attr: [ server, first_address ] }

  floating_ip_server:
    description: IP address of the deployed compute server
    value: { get_attr: [floating_ip, floating_ip_address] }
